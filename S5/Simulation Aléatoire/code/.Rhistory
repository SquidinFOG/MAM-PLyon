teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- dist<=(0.5 * a * cos(teta))
}
return (2*n/count)
}
test = buffon(50, 2, 4)
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*n/count)
}
test = buffon(50, 2, 4)
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*n/count)
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*a / (L*moy(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*a / (L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(0,L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(1, 0, L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
}
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
j = 0
for (j in 0:n)
{
teta <- runif(1, -(pi/2), pi/2)
x <- runif(1, 0, L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
x
teta
lancer
}
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
count = 0
teta <- runif(1, -(pi/2), pi/2)
x <- runif(1, 0, L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
teta <- runif(1, -(pi/2), pi/2)
x <- runif(1, 0, L)
# if(x <= a/2 * cos(teta))
# {
#    count <- count + 1
# }
# else if(x >= L-a/2 * cos(teta)))
# {
#    count <-count + 1
# }
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(50, 2, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(1000, 2, 4)
test
test = buffon(1000, 2, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(1000000, 2, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(100000000000, 2, 4)
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(10000000000, 2, 4)
test = buffon(1000000000, 2, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(100000, 1, 0.75)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(100000, 1, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(1000000, 1, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(10000000, 1, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(100000000, 1, 4)
test
buffon <- function(n, a, L) {
teta <- runif(n, -(pi/2), pi/2)
x <- runif(n, 0, 0.5*L)
lancer <- x<=(0.5 * a * cos(teta))
return (2*a/(L*mean(lancer)))
}
test = buffon(10000000, 1, 4)
test
n = 10^4
V = rexp(n, 1)
U = runif(n, 0, 1)
X1 = sqrt(2*V)*cos(2*pi*U)
X2 = sqrt(2*V)*sin(2*pi*U)
I2=matrix (c(1,0,0,1), 2, 2);
par(mfrow=c(1,3))
hist(X1, col = "blue")
hist(X2, col = "red")
curve(dnorm(x,0,I2), -5, 5)
N <- 10000
Acc <- rep(0, N)
U <- runif(N, 0, 1)
V <- runif(N, 0, 1)
x <- 2*U - 1
y <- sqrt(1-x^2)
for(i in 1:N){
if(V[i]<y[i]){Acc[i]<-x[i]}else{Acc[i]<-0}
}
hist(Acc, V)
N <- 10000
Acc <- rep(0, N)
U <- runif(N, 0, 1)
V <- runif(N, 0, 1)
x <- 2*U - 1
y <- sqrt(1-x^2)
for(i in 1:N){
if(V[i]<y[i]){Acc[i]<-x[i]}else{Acc[i]<-0}
}
hist(Acc, V)
plot(Acc, V)
N <- 10000
Acc <- rep(0, N)
U <- runif(N, 0, 1)
V <- runif(N, 0, 1)
x <- 2*U - 1
y <- sqrt(1-x^2)
for(i in 1:N){
if(V[i]<y[i]){Acc[i]<-x[i]}else{Acc[i]<-0}
}
plot(Acc, V)
N <- 10000
Acc <- rep(0, N)
U <- runif(N, 0, 1)
V <- runif(N, 0, 1)
x <- 2*U - 1
y <- sqrt(1-x^2)
for(i in 1:N){
if(V[i]<y[i]){Acc[i]<-x[i]}else{Acc[i]<-0}
}
plot(Acc, V)
N <- 10000
Acc <- rep(0, N)
U <- runif(N, 0, 1)
V <- runif(N, 0, 1)
x <- 2*U - 1
y <- sqrt(1-x^2)
for(i in 1:N){
if(V[i]<y[i]){
Acc[i]<-x[i]
}else{
Acc[i]<-0
}
}
plot(Acc, V)
aprx <- function(nb_simu){
buffer = 0
for (i in 1:nb_simu){
x=runif(1,0,1)
y=runif(1,0,1)
if( (x^2 + y^2) <= 1){
buffer = buffer + 1
}
}
aprx = buffer / nb_simu*4
ecart = pi/aprx
return (aprx)
}
aprx(1000000)
n = 10^4
lambda = 2
X = rexp(n, lambda)
U = runif(n, 0, 1)
Fu = -(1/lambda) * ln(1-U)
plot(Fu)
plot(X)
n = 10^4
lambda = 2
X = rexp(n, lambda)
U = runif(n, 0, 1)
Fu = -(1/lambda) * log(1-U)
curve(Fu)
curve(X)
lambda=10;
par(mfrow=c(1,1));
curve(pexp(x,lambda),0,1,main='Fonction de répartition: loi exp')
N=100;
x=runif(N,0,1);
inv=function(x){(-1/lambda)*log(1-x)};
curve(inv(x),0,1,main='Fonction de répartition: (-1/lambda)*ln(1-x)')
lambda=10;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='Fonction de répartition: loi exp')
N=100;
x=runif(N,0,1);
inv=function(x){(-1/lambda)*log(1-x)};
curve(inv(x),0,1,main='Fonction de répartition: (-1/lambda)*ln(1-x)')
lambda=10;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
N=100;
x=runif(N,0,1);
inv=function(x){(-1/lambda)*log(1-x)};
curve(inv(x),0,1,main='F : (-1/lambda)*ln(1-x)')
x<- runif(N,0,1);
x2<-1/lambda)*log(1-x);
curve(pexp(x2,lambda),0,1,main='Fonction de répartition de x2: loi exp')
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(pexp(x2,lambda),0,1,main='Fonction de répartition de x2: loi exp')
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(pexp(x2),lambda),0,1,main='Fonction de répartition de x2: loi exp')
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(pexp(x,lambda),0,1,main='Fonction de répartition de x2: loi exp')
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(pexp(inv,lambda),0,1,main='Fonction de répartition de x2: loi exp')
lambda=10;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
N=100;
x=runif(N,0,1);
inv=function(x){(-1/lambda)*log(1-x)};
curve(inv(x),0,1,main='F : (-1/lambda)*ln(1-x)')
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(pexp(inv,lambda),0,1,main='Fonction de répartition de x2: loi exp')
;
lambda=10;
par(mfrow=c(1,2));
x<- runif(N,0,1);
N=100;
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(pexp(inv,lambda),0,1,main='Fonction de répartition de x2: loi exp')
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(rexp(inv,lambda),0,1,main='Fonction de répartition de x2: loi exp')
x2<-(-1/lambda)*log(1-x);
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(inv(x),0,1,main='Fonction de répartition de x2: loi exp')
inv=function(x){(-1/lambda)*log(1-x)};
x<- runif(N,0,1);
x2<-(-1/lambda)*log(1-x);
curve(inv(x),0,1,main='Fonction de répartition de x2: loi exp')
y <- rexp(N, 1);
curve(y,0,1,main='Fonction de répartition de x2: loi exp')
lambda=10;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
N=100;
x=runif(N,0,1);
inv=function(x){(-1/lambda)*log(1-x)};
curve(inv(x),0,1,main='F : (-1/lambda)*ln(1-x)')
lambda=10;
N=100;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
u <- runif(N, 0, 1);
inv <- function(u){(-1/lambda)*log(1-u)};
curve(inv(u),0,1,main='F : (-1/lambda)*ln(1-x)')
lambda=10;
N=100;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
u <- runif(N, 0, 1);
inv <- function(u){(-1/lambda)*log(1-u)};
curve(inv(u),0,1,main='F : (-1/lambda)*ln(1-x)')
lambda=10;
N=100;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
u <- runif(N, 0, 1);
inv = function(u){(-1/lambda)*log(1-u)};
curve(inv(u),0,1,main='F : (-1/lambda)*ln(1-x)')
lambda=10;
N=100;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
u <- runif(N, 0, 1);
inv = function(u){(-1/lambda)*log(1-u)};
curve(inv(x),0,1,main='F : (-1/lambda)*ln(1-x)')
lambda=10;
N=100;
par(mfrow=c(1,2));
curve(pexp(x,lambda),0,1,main='F : loi exp')
u <- runif(N, 0, 1);
inv = function(u){(-1/lambda)*log(1-u)};
curve(inv(x),0,1,main='F : (-1/lambda)*ln(1-x)')
